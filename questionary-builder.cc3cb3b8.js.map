{"mappings":"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","sources":["<anon>","src/builder.js","src/server/create.js"],"sourcesContent":["import \"./edit.446baefd.js\";\nimport \"./questionary-builder.32dc0967.js\";\n\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequired7c6\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequired7c6\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $nuyhG = parcelRequire(\"nuyhG\");\n\nvar $5a6Bh = parcelRequire(\"5a6Bh\");\nconst $226c642d37ea51a4$var$uploadImage = async (file)=>{\n    const fileName = `${crypto.randomUUID()}.${file.name.split('.').pop()}`;\n    const { error: error } = await (0, $nuyhG.supabase).storage.from('images').upload(fileName, file);\n    if (error) throw new Error(\"\\u041F\\u043E\\u043C\\u0438\\u043B\\u043A\\u0430 \\u0437\\u0430\\u0432\\u0430\\u043D\\u0442\\u0430\\u0436\\u0435\\u043D\\u043D\\u044F \\u0437\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u043D\\u044F: \" + error.message);\n    const { data: publicUrl } = (0, $nuyhG.supabase).storage.from('images').getPublicUrl(fileName);\n    return publicUrl.publicURL;\n};\nconst $226c642d37ea51a4$export$400fb1c6bf4e6324 = async ()=>{\n    let testId = null;\n    try {\n        const testTitle = document.getElementById('test-title').value.trim();\n        const testDescription = document.getElementById('test-description').value.trim();\n        if (!testTitle || !testDescription) throw new Error(\"\\u041D\\u0430\\u0437\\u0432\\u0430 \\u0456 \\u043E\\u043F\\u0438\\u0441 \\u0442\\u0435\\u043A\\u0441\\u0442\\u0443 \\u043D\\u0435 \\u043C\\u043E\\u0436\\u0443\\u0442\\u044C \\u0431\\u0443\\u0442\\u0438 \\u043F\\u0443\\u0441\\u0442\\u0438\\u043C\\u0438!\");\n        const questions = await Promise.all(Array.from(document.querySelectorAll('.question')).map(async (question)=>{\n            const questionId = question.id;\n            const title = question.querySelector('input[name=\"question\"]').value.trim();\n            const type = question.querySelector('select').value;\n            if (!title) throw new Error(\"\\u041F\\u0438\\u0442\\u0430\\u043D\\u043D\\u044F \\u043D\\u0435 \\u043C\\u043E\\u0436\\u0435 \\u0431\\u0443\\u0442\\u0438 \\u043F\\u0443\\u0441\\u0442\\u0438\\u043C!\");\n            let imageFile = question.querySelector('input[type=\"file\"]').files[0];\n            let imageUrl = imageFile ? await $226c642d37ea51a4$var$uploadImage(imageFile, questionId) : null;\n            let answers = Array.from(question.querySelectorAll('.answer')).map((answer)=>{\n                const inputField = answer.querySelector('input[name=\"answer\"]');\n                const isChecked = answer.querySelector('.correct-answer')?.checked;\n                const answerText = inputField.value.trim();\n                if (!answerText) throw new Error(\"\\u0412\\u0456\\u0434\\u043F\\u043E\\u0432\\u0456\\u0434\\u044C \\u043D\\u0435 \\u043C\\u043E\\u0436\\u0435 \\u0431\\u0443\\u0442\\u0438 \\u043F\\u0443\\u0441\\u0442\\u043E\\u044E!\");\n                return {\n                    text: answerText,\n                    correct_answer: type === 'text' ? answerText : isChecked ? 'true' : 'false'\n                };\n            });\n            if (type === 'text' && answers.length === 0) {\n                const inputField = question.querySelector('input[name=\"text-answer\"]');\n                if (!inputField) throw new Error(\"\\u0412\\u0456\\u0434\\u0441\\u0443\\u0442\\u043D\\u0454 \\u043F\\u043E\\u043B\\u0435 \\u0434\\u043B\\u044F \\u0432\\u0432\\u043E\\u0434\\u0443 \\u0432\\u0456\\u0434\\u043F\\u043E\\u0432\\u0456\\u0434\\u0456!\");\n                const textAnswer = inputField.value.trim();\n                if (!textAnswer) throw new Error(\"\\u0412\\u0456\\u0434\\u043F\\u043E\\u0432\\u0456\\u0434\\u044C \\u043D\\u0430 \\u0442\\u0435\\u043A\\u0441\\u0442\\u043E\\u0432\\u0435 \\u043F\\u0438\\u0442\\u0430\\u043D\\u043D\\u044F \\u043D\\u0435 \\u043C\\u043E\\u0436\\u0435 \\u0431\\u0443\\u0442\\u0438 \\u043F\\u0443\\u0441\\u0442\\u043E\\u044E!\");\n                answers = [\n                    {\n                        text: textAnswer,\n                        correct_answer: textAnswer\n                    }\n                ];\n            }\n            return {\n                id: questionId,\n                title: title,\n                type: type,\n                imageUrl: imageUrl,\n                answers: answers\n            };\n        }));\n        const { data: newTest, error: tError } = await (0, $nuyhG.supabase).from('tests').insert([\n            {\n                title: testTitle,\n                description: testDescription,\n                count_questions: questions.length,\n                completed: 0\n            }\n        ]).select();\n        if (tError) throw new Error(tError.message);\n        testId = newTest[0].id;\n        const questionsToInsert = questions.map((q)=>({\n                test_id: testId,\n                question: q.title,\n                type: q.type,\n                image_url: q.imageUrl\n            }));\n        const { data: relatedQuestions, error: qError } = await (0, $nuyhG.supabase).from('questions').insert(questionsToInsert).select();\n        if (qError) throw new Error(qError.message);\n        const answersToInsert = relatedQuestions.flatMap((q, index)=>questions[index].answers.map((answer)=>({\n                    question_id: q.id,\n                    answer: answer.text,\n                    is_right: answer.correct_answer\n                })));\n        const { error: ansError } = await (0, $nuyhG.supabase).from('answers').insert(answersToInsert);\n        if (ansError) throw new Error(ansError.message);\n        (0, (/*@__PURE__*/$parcel$interopDefault($5a6Bh))).Notify.success(\"\\u0423\\u0441\\u043F\\u0456\\u0448\\u043D\\u043E \\u0434\\u043E\\u0434\\u0430\\u043D\\u043E \\u043D\\u043E\\u0432\\u0438\\u0439 \\u0442\\u0435\\u0441\\u0442!\");\n        return true;\n    } catch (error) {\n        (0, (/*@__PURE__*/$parcel$interopDefault($5a6Bh))).Notify.failure(error.message);\n        console.error(error);\n        if (testId) await (0, $nuyhG.supabase).from('tests').delete().eq('id', testId);\n        return false;\n    }\n};\n\n\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    document.getElementById('add-question-btn').addEventListener('click', $0342a361bf40db4e$var$addQuestion);\n});\nlet $0342a361bf40db4e$var$questionCount = 0;\nfunction $0342a361bf40db4e$var$removeImage(questionId) {\n    const container = document.getElementById(questionId);\n    const fileInput = container.querySelector('input[type=\"file\"]');\n    if (fileInput) fileInput.value = null;\n    const imagePreview = container.querySelector('.image-preview');\n    if (imagePreview) imagePreview.innerHTML = '';\n}\nfunction $0342a361bf40db4e$var$addAnswer(questionId) {\n    const answersDiv = document.getElementById(`${questionId}-answers`);\n    const questionElement = document.getElementById(questionId);\n    if (!questionElement) return;\n    const questionType = questionElement.querySelector('select').value;\n    if (questionType === 'text') {\n        if (answersDiv.children.length === 0) {\n            const input = document.createElement('input');\n            input.type = 'text';\n            input.name = `text-answer`;\n            input.placeholder = \"\\u041F\\u0440\\u0430\\u0432\\u0438\\u043B\\u044C\\u043D\\u0430 \\u0432\\u0456\\u0434\\u043F\\u043E\\u0432\\u0456\\u0434\\u044C\";\n            answersDiv.appendChild(input);\n        }\n        return;\n    }\n    const answerDiv = document.createElement('div');\n    answerDiv.classList.add('answer');\n    let inputType = questionType === 'single' ? 'radio' : 'checkbox';\n    answerDiv.innerHTML = `\n      <label>\n          <input type=\"text\" name=\"answer\" class=\"answer-input\" placeholder=\"\\u{412}\\u{430}\\u{440}\\u{456}\\u{430}\\u{43D}\\u{442}\">\n          <input type=\"${inputType}\" class=\"correct-answer\" name=\"correct\">\n          <span>\\u{41F}\\u{440}\\u{430}\\u{432}\\u{438}\\u{43B}\\u{44C}\\u{43D}\\u{430} \\u{432}\\u{456}\\u{434}\\u{43F}\\u{43E}\\u{432}\\u{456}\\u{434}\\u{44C}</span>\n      </label>\n      <button class=\"remove-question\" onclick=\"this.parentElement.remove()\">\\u{412}\\u{438}\\u{434}\\u{430}\\u{43B}\\u{438}\\u{442}\\u{438}</button>\n  `;\n    answersDiv.appendChild(answerDiv);\n}\nfunction $0342a361bf40db4e$var$updateAnswerType(questionId, selectElement) {\n    const answersDiv = document.getElementById(`${questionId}-answers`);\n    answersDiv.innerHTML = '';\n}\nfunction $0342a361bf40db4e$var$removeElement(id) {\n    const element = document.getElementById(id);\n    if (element) {\n        element.remove();\n        $0342a361bf40db4e$var$questionCount--;\n        $0342a361bf40db4e$var$updateQuestionNumbers();\n    }\n}\nfunction $0342a361bf40db4e$var$previewImage(event, questionId) {\n    const file = event.target.files[0];\n    if (file) {\n        const reader = new FileReader();\n        reader.onload = function(e) {\n            const previewContainer = document.getElementById(`${questionId}-image-preview`);\n            previewContainer.innerHTML = `\n            <div class=\"image-wrapper\">\n              <img src=\"${e.target.result}\" alt=\"\\u{417}\\u{43E}\\u{431}\\u{440}\\u{430}\\u{436}\\u{435}\\u{43D}\\u{43D}\\u{44F}\">\n              <button class=\"delete-image\" onclick=\"removeImage('${questionId}')\">\\xd7</button>\n            </div>\n          `;\n        };\n        reader.readAsDataURL(file);\n    }\n}\nfunction $0342a361bf40db4e$var$addQuestion() {\n    $0342a361bf40db4e$var$questionCount++;\n    let questionId = `question-${$0342a361bf40db4e$var$questionCount}`;\n    const questionDiv = document.createElement('div');\n    questionDiv.classList.add('question');\n    questionDiv.setAttribute('id', questionId);\n    questionDiv.setAttribute('draggable', true);\n    questionDiv.innerHTML = `\n          <div class=\"question-header\">\n              <span class=\"drag-handle\">\\u{2630}</span>\n              <label><span class=\"question-title\">\\u{41F}\\u{438}\\u{442}\\u{430}\\u{43D}\\u{43D}\\u{44F} ${$0342a361bf40db4e$var$questionCount}:</span> \n                  <input type=\"text\" id=\"question-title\" name=\"question\" placeholder=\"\\u{412}\\u{432}\\u{435}\\u{434}\\u{456}\\u{442}\\u{44C} \\u{43F}\\u{438}\\u{442}\\u{430}\\u{43D}\\u{43D}\\u{44F}\">\n              </label>\n              <label>\\u{422}\\u{438}\\u{43F}: \n                  <select id=\"question-type\" onchange=\"updateAnswerType('${questionId}', this)\">\n                      <option value=\"text\">\\u{422}\\u{435}\\u{43A}\\u{441}\\u{442}</option>\n                      <option value=\"single\">\\u{41E}\\u{434}\\u{438}\\u{43D} \\u{432}\\u{430}\\u{440}\\u{456}\\u{430}\\u{43D}\\u{442}</option>\n                      <option value=\"multiple\">\\u{41A}\\u{456}\\u{43B}\\u{44C}\\u{43A}\\u{430} \\u{432}\\u{430}\\u{440}\\u{456}\\u{430}\\u{43D}\\u{442}\\u{456}\\u{432}</option>\n                  </select>\n              </label>\n              <button onclick=\"removeElement('${questionId}')\">\\u{412}\\u{438}\\u{434}\\u{430}\\u{43B}\\u{438}\\u{442}\\u{438}</button>\n          </div>\n  \n          <div class=\"image-upload\">\n              <input type=\"file\" accept=\"image/*\" onchange=\"previewImage(event, '${questionId}')\">\n              <div class=\"image-preview\" id=\"${questionId}-image-preview\"></div>\n          </div>\n  \n          <div class=\"answers\" id=\"${questionId}-answers\"></div>\n          <button class=\"add-answer\" onclick=\"addAnswer('${questionId}')\">\\u{414}\\u{43E}\\u{434}\\u{430}\\u{442}\\u{438} \\u{432}\\u{456}\\u{434}\\u{43F}\\u{43E}\\u{432}\\u{456}\\u{434}\\u{44C}</button> \n      `;\n    document.getElementById('questions-container').appendChild(questionDiv);\n    questionDiv.addEventListener('dragstart', $0342a361bf40db4e$var$dragStart);\n    questionDiv.addEventListener('dragover', $0342a361bf40db4e$var$dragOver);\n    questionDiv.addEventListener('drop', $0342a361bf40db4e$var$drop);\n    questionDiv.addEventListener('dragleave', $0342a361bf40db4e$var$dragLeave);\n    questionDiv.addEventListener('dragend', $0342a361bf40db4e$var$dragEnd);\n}\nfunction $0342a361bf40db4e$var$updateQuestionNumbers() {\n    document.querySelectorAll('.question').forEach((question, index)=>{\n        const newId = `question-${index + 1}`;\n        question.setAttribute('id', newId);\n        question.querySelector('.question-title').innerText = `\\u{41F}\\u{438}\\u{442}\\u{430}\\u{43D}\\u{43D}\\u{44F} ${index + 1}:`;\n        const select = question.querySelector('select');\n        select.setAttribute('onchange', `updateAnswerType('${newId}', this)`);\n        const answerDiv = question.querySelector('.answers');\n        answerDiv.setAttribute('id', `${newId}-answers`);\n        const addAnswerBtn = question.querySelector('.add-answer');\n        addAnswerBtn.setAttribute('onclick', `addAnswer('${newId}')`);\n        const deleteBtn = question.querySelector('button[onclick^=\"removeElement\"]');\n        deleteBtn.setAttribute('onclick', `removeElement('${newId}')`);\n        question.querySelectorAll('.correct-answer').forEach((input)=>{\n            input.name = `correct-${newId}`;\n        });\n    });\n}\nlet $0342a361bf40db4e$var$draggedItem = null;\nfunction $0342a361bf40db4e$var$dragStart(event) {\n    $0342a361bf40db4e$var$draggedItem = event.target;\n    event.target.classList.add('dragging');\n}\nfunction $0342a361bf40db4e$var$dragOver(event) {\n    event.preventDefault();\n    const target = event.target.closest('.question');\n    const container = document.getElementById('questions-container');\n    if (target && target !== $0342a361bf40db4e$var$draggedItem && container.contains(target)) {\n        const children = Array.from(container.children);\n        const draggedIndex = children.indexOf($0342a361bf40db4e$var$draggedItem);\n        const targetIndex = children.indexOf(target);\n        if (draggedIndex > targetIndex) container.insertBefore($0342a361bf40db4e$var$draggedItem, target);\n        else container.insertBefore($0342a361bf40db4e$var$draggedItem, target.nextSibling);\n    }\n}\nfunction $0342a361bf40db4e$var$drop(event) {\n    event.preventDefault();\n    $0342a361bf40db4e$var$draggedItem.classList.remove('dragging');\n}\nfunction $0342a361bf40db4e$var$dragLeave(event) {\n    event.target.closest('.question')?.classList.remove('drag-over');\n}\nfunction $0342a361bf40db4e$var$dragEnd() {\n    const container = document.getElementById('questions-container');\n    if (!container.contains($0342a361bf40db4e$var$draggedItem)) originalPosition ? originalPosition.parentNode.insertBefore($0342a361bf40db4e$var$draggedItem, originalPosition) : container.appendChild($0342a361bf40db4e$var$draggedItem);\n    $0342a361bf40db4e$var$draggedItem.classList.remove('dragging');\n    $0342a361bf40db4e$var$draggedItem = null;\n    $0342a361bf40db4e$var$updateQuestionNumbers();\n}\ndocument.getElementById('add-test-btn').addEventListener('click', async (e)=>{\n    e.target.setAttribute('disabled', true);\n    if (await (0, $226c642d37ea51a4$export$400fb1c6bf4e6324)()) setTimeout(()=>{\n        window.location.replace('/');\n    }, 1000);\n    else e.currentTarget.removeAttribute('disabled');\n});\nwindow.removeImage = $0342a361bf40db4e$var$removeImage;\nwindow.addAnswer = $0342a361bf40db4e$var$addAnswer;\nwindow.updateAnswerType = $0342a361bf40db4e$var$updateAnswerType;\nwindow.removeElement = $0342a361bf40db4e$var$removeElement;\nwindow.previewImage = $0342a361bf40db4e$var$previewImage;\n$0342a361bf40db4e$var$addQuestion();\n\n\n//# sourceMappingURL=questionary-builder.cc3cb3b8.js.map\n","import { createTest } from './server/create';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  document\n    .getElementById('add-question-btn')\n    .addEventListener('click', addQuestion);\n});\n\nlet questionCount = 0;\n\nfunction removeImage(questionId) {\n  const container = document.getElementById(questionId);\n\n  const fileInput = container.querySelector('input[type=\"file\"]');\n\n  if (fileInput) {\n    fileInput.value = null;\n  }\n\n  const imagePreview = container.querySelector('.image-preview');\n  if (imagePreview) {\n    imagePreview.innerHTML = '';\n  }\n}\n\nfunction addAnswer(questionId) {\n  const answersDiv = document.getElementById(`${questionId}-answers`);\n  const questionElement = document.getElementById(questionId);\n\n  if (!questionElement) {\n    return;\n  }\n\n  const questionType = questionElement.querySelector('select').value;\n\n  if (questionType === 'text') {\n    if (answersDiv.children.length === 0) {\n      const input = document.createElement('input');\n      input.type = 'text';\n      input.name = `text-answer`;\n      input.placeholder = 'Правильна відповідь';\n      answersDiv.appendChild(input);\n    }\n    return;\n  }\n\n  const answerDiv = document.createElement('div');\n  answerDiv.classList.add('answer');\n\n  let inputType = questionType === 'single' ? 'radio' : 'checkbox';\n  answerDiv.innerHTML = `\n      <label>\n          <input type=\"text\" name=\"answer\" class=\"answer-input\" placeholder=\"Варіант\">\n          <input type=\"${inputType}\" class=\"correct-answer\" name=\"correct\">\n          <span>Правильна відповідь</span>\n      </label>\n      <button class=\"remove-question\" onclick=\"this.parentElement.remove()\">Видалити</button>\n  `;\n\n  answersDiv.appendChild(answerDiv);\n}\n\nfunction updateAnswerType(questionId, selectElement) {\n  const answersDiv = document.getElementById(`${questionId}-answers`);\n  answersDiv.innerHTML = '';\n}\n\nfunction removeElement(id) {\n  const element = document.getElementById(id);\n  if (element) {\n    element.remove();\n    questionCount--;\n    updateQuestionNumbers();\n  }\n}\n\nfunction previewImage(event, questionId) {\n  const file = event.target.files[0];\n  if (file) {\n    const reader = new FileReader();\n    reader.onload = function (e) {\n      const previewContainer = document.getElementById(\n        `${questionId}-image-preview`\n      );\n      previewContainer.innerHTML = `\n            <div class=\"image-wrapper\">\n              <img src=\"${e.target.result}\" alt=\"Зображення\">\n              <button class=\"delete-image\" onclick=\"removeImage('${questionId}')\">×</button>\n            </div>\n          `;\n    };\n    reader.readAsDataURL(file);\n  }\n}\n\nfunction addQuestion() {\n  questionCount++;\n  let questionId = `question-${questionCount}`;\n\n  const questionDiv = document.createElement('div');\n  questionDiv.classList.add('question');\n  questionDiv.setAttribute('id', questionId);\n  questionDiv.setAttribute('draggable', true);\n\n  questionDiv.innerHTML = `\n          <div class=\"question-header\">\n              <span class=\"drag-handle\">☰</span>\n              <label><span class=\"question-title\">Питання ${questionCount}:</span> \n                  <input type=\"text\" id=\"question-title\" name=\"question\" placeholder=\"Введіть питання\">\n              </label>\n              <label>Тип: \n                  <select id=\"question-type\" onchange=\"updateAnswerType('${questionId}', this)\">\n                      <option value=\"text\">Текст</option>\n                      <option value=\"single\">Один варіант</option>\n                      <option value=\"multiple\">Кілька варіантів</option>\n                  </select>\n              </label>\n              <button onclick=\"removeElement('${questionId}')\">Видалити</button>\n          </div>\n  \n          <div class=\"image-upload\">\n              <input type=\"file\" accept=\"image/*\" onchange=\"previewImage(event, '${questionId}')\">\n              <div class=\"image-preview\" id=\"${questionId}-image-preview\"></div>\n          </div>\n  \n          <div class=\"answers\" id=\"${questionId}-answers\"></div>\n          <button class=\"add-answer\" onclick=\"addAnswer('${questionId}')\">Додати відповідь</button> \n      `;\n\n  document.getElementById('questions-container').appendChild(questionDiv);\n\n  questionDiv.addEventListener('dragstart', dragStart);\n  questionDiv.addEventListener('dragover', dragOver);\n  questionDiv.addEventListener('drop', drop);\n  questionDiv.addEventListener('dragleave', dragLeave);\n  questionDiv.addEventListener('dragend', dragEnd);\n}\n\nfunction updateQuestionNumbers() {\n  document.querySelectorAll('.question').forEach((question, index) => {\n    const newId = `question-${index + 1}`;\n    question.setAttribute('id', newId);\n\n    question.querySelector('.question-title').innerText = `Питання ${\n      index + 1\n    }:`;\n\n    const select = question.querySelector('select');\n    select.setAttribute('onchange', `updateAnswerType('${newId}', this)`);\n\n    const answerDiv = question.querySelector('.answers');\n    answerDiv.setAttribute('id', `${newId}-answers`);\n\n    const addAnswerBtn = question.querySelector('.add-answer');\n    addAnswerBtn.setAttribute('onclick', `addAnswer('${newId}')`);\n\n    const deleteBtn = question.querySelector(\n      'button[onclick^=\"removeElement\"]'\n    );\n    deleteBtn.setAttribute('onclick', `removeElement('${newId}')`);\n\n    question.querySelectorAll('.correct-answer').forEach(input => {\n      input.name = `correct-${newId}`;\n    });\n  });\n}\n\nlet draggedItem = null;\n\nfunction dragStart(event) {\n  draggedItem = event.target;\n  event.target.classList.add('dragging');\n}\n\nfunction dragOver(event) {\n  event.preventDefault();\n  const target = event.target.closest('.question');\n  const container = document.getElementById('questions-container');\n\n  if (target && target !== draggedItem && container.contains(target)) {\n    const children = Array.from(container.children);\n    const draggedIndex = children.indexOf(draggedItem);\n    const targetIndex = children.indexOf(target);\n\n    if (draggedIndex > targetIndex) {\n      container.insertBefore(draggedItem, target);\n    } else {\n      container.insertBefore(draggedItem, target.nextSibling);\n    }\n  }\n}\n\nfunction drop(event) {\n  event.preventDefault();\n  draggedItem.classList.remove('dragging');\n}\n\nfunction dragLeave(event) {\n  event.target.closest('.question')?.classList.remove('drag-over');\n}\n\nfunction dragEnd() {\n  const container = document.getElementById('questions-container');\n  if (!container.contains(draggedItem)) {\n    originalPosition\n      ? originalPosition.parentNode.insertBefore(draggedItem, originalPosition)\n      : container.appendChild(draggedItem);\n  }\n  draggedItem.classList.remove('dragging');\n  draggedItem = null;\n  updateQuestionNumbers();\n}\n\ndocument.getElementById('add-test-btn').addEventListener('click', async e => {\n  e.target.setAttribute('disabled', true);\n  if (await createTest()) {\n    setTimeout(() => {\n      window.location.replace('/');\n    }, 1000);\n  } else {\n    e.currentTarget.removeAttribute('disabled');\n  }\n});\n\nwindow.removeImage = removeImage;\nwindow.addAnswer = addAnswer;\nwindow.updateAnswerType = updateAnswerType;\nwindow.removeElement = removeElement;\nwindow.previewImage = previewImage;\n\naddQuestion();\n","import { supabase } from './supabase';\nimport Notiflix from 'notiflix';\n\nconst uploadImage = async file => {\n  const fileName = `${crypto.randomUUID()}.${file.name.split('.').pop()}`;\n\n  const { error } = await supabase.storage\n    .from('images')\n    .upload(fileName, file);\n\n  if (error)\n    throw new Error('Помилка завантаження зображення: ' + error.message);\n\n  const { data: publicUrl } = supabase.storage\n    .from('images')\n    .getPublicUrl(fileName);\n  return publicUrl.publicURL;\n};\n\nexport const createTest = async () => {\n  let testId = null;\n\n  try {\n    const testTitle = document.getElementById('test-title').value.trim();\n    const testDescription = document\n      .getElementById('test-description')\n      .value.trim();\n\n    if (!testTitle || !testDescription) {\n      throw new Error('Назва і опис тексту не можуть бути пустими!');\n    }\n\n    const questions = await Promise.all(\n      Array.from(document.querySelectorAll('.question')).map(async question => {\n        const questionId = question.id;\n        const title = question\n          .querySelector('input[name=\"question\"]')\n          .value.trim();\n        const type = question.querySelector('select').value;\n\n        if (!title) throw new Error('Питання не може бути пустим!');\n\n        let imageFile = question.querySelector('input[type=\"file\"]').files[0];\n        let imageUrl = imageFile\n          ? await uploadImage(imageFile, questionId)\n          : null;\n\n        let answers = Array.from(question.querySelectorAll('.answer')).map(\n          answer => {\n            const inputField = answer.querySelector('input[name=\"answer\"]');\n            const isChecked = answer.querySelector('.correct-answer')?.checked;\n            const answerText = inputField.value.trim();\n\n            if (!answerText) throw new Error('Відповідь не може бути пустою!');\n\n            return {\n              text: answerText,\n              correct_answer:\n                type === 'text' ? answerText : isChecked ? 'true' : 'false',\n            };\n          }\n        );\n\n        if (type === 'text' && answers.length === 0) {\n          const inputField = question.querySelector(\n            'input[name=\"text-answer\"]'\n          );\n          if (!inputField)\n            throw new Error('Відсутнє поле для вводу відповіді!');\n          const textAnswer = inputField.value.trim();\n          if (!textAnswer)\n            throw new Error(\n              'Відповідь на текстове питання не може бути пустою!'\n            );\n          answers = [{ text: textAnswer, correct_answer: textAnswer }];\n        }\n\n        return { id: questionId, title, type, imageUrl, answers };\n      })\n    );\n\n    const { data: newTest, error: tError } = await supabase\n      .from('tests')\n      .insert([\n        {\n          title: testTitle,\n          description: testDescription,\n          count_questions: questions.length,\n          completed: 0,\n        },\n      ])\n      .select();\n\n    if (tError) throw new Error(tError.message);\n    testId = newTest[0].id;\n\n    const questionsToInsert = questions.map(q => ({\n      test_id: testId,\n      question: q.title,\n      type: q.type,\n      image_url: q.imageUrl,\n    }));\n\n    const { data: relatedQuestions, error: qError } = await supabase\n      .from('questions')\n      .insert(questionsToInsert)\n      .select();\n\n    if (qError) throw new Error(qError.message);\n\n    const answersToInsert = relatedQuestions.flatMap((q, index) =>\n      questions[index].answers.map(answer => ({\n        question_id: q.id,\n        answer: answer.text,\n        is_right: answer.correct_answer,\n      }))\n    );\n\n    const { error: ansError } = await supabase\n      .from('answers')\n      .insert(answersToInsert);\n    if (ansError) throw new Error(ansError.message);\n\n    Notiflix.Notify.success('Успішно додано новий тест!');\n    return true\n  } catch (error) {\n    Notiflix.Notify.failure(error.message);\n    console.error(error);\n\n    if (testId) {\n      await supabase.from('tests').delete().eq('id', testId);\n    }\n    return false\n  }\n};\n"],"names":["$parcel$interopDefault","a","__esModule","default","$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$nuyhG","$5a6Bh","$226c642d37ea51a4$var$uploadImage","file","fileName","crypto","randomUUID","name","split","pop","error","supabase","storage","from","upload","message","data","publicUrl","getPublicUrl","publicURL","$226c642d37ea51a4$export$400fb1c6bf4e6324","testId","testTitle","document","getElementById","value","trim","testDescription","questions","Promise","all","Array","querySelectorAll","map","question","questionId","title","querySelector","type","imageFile","files","imageUrl","answers","answer","inputField","isChecked","checked","answerText","text","correct_answer","length","textAnswer","newTest","tError","insert","description","count_questions","completed","select","questionsToInsert","q","test_id","image_url","relatedQuestions","qError","answersToInsert","flatMap","index","question_id","is_right","ansError","Notify","success","failure","console","delete","eq","addEventListener","$0342a361bf40db4e$var$addQuestion","$0342a361bf40db4e$var$questionCount","questionDiv","createElement","classList","add","setAttribute","innerHTML","appendChild","$0342a361bf40db4e$var$dragStart","$0342a361bf40db4e$var$dragOver","$0342a361bf40db4e$var$drop","$0342a361bf40db4e$var$dragLeave","$0342a361bf40db4e$var$dragEnd","$0342a361bf40db4e$var$updateQuestionNumbers","forEach","newId","innerText","answerDiv","addAnswerBtn","deleteBtn","input","$0342a361bf40db4e$var$draggedItem","event","target","preventDefault","closest","container","contains","children","draggedIndex","indexOf","insertBefore","nextSibling","remove","originalPosition","parentNode","e","setTimeout","location","replace","currentTarget","removeAttribute","removeImage","fileInput","imagePreview","addAnswer","answersDiv","questionElement","questionType","placeholder","updateAnswerType","selectElement","removeElement","element","previewImage","reader","FileReader","onload","previewContainer","result","readAsDataURL"],"version":3,"file":"questionary-builder.cc3cb3b8.js.map"}