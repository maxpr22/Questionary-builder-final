{"mappings":"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","sources":["<anon>","src/walkthrough.js","funcs/loadAnswersToQuestions.js","funcs/loadQuestionsToTest.js","src/server/completed.js","src/server/stat.js","funcs/getStats.js"],"sourcesContent":["(function () {\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n\nvar $7ZMNl = parcelRequire(\"7ZMNl\");\nconst $c51ab5d54aaa30b2$export$7a30e8c3b909984b = async (id)=>{\n    const { data: data, error: error } = await (0, $7ZMNl.supabase).from('answers').select('question_id,answer, id').eq('question_id', id);\n    if (error) throw new Error(error.message);\n    return data;\n};\n\n\n\nvar $7ZMNl = parcelRequire(\"7ZMNl\");\nconst $6d7041d98d88f3fe$export$de5889d48e25167b = async (id)=>{\n    const { data: data, error: error } = await (0, $7ZMNl.supabase).from('questions').select('*').eq('test_id', id);\n    if (error) throw new Error(error.message);\n    return data;\n};\n\n\n\nvar $hk4dl = parcelRequire(\"hk4dl\");\n\nvar $7ZMNl = parcelRequire(\"7ZMNl\");\nconst $a86d009ba1f03684$var$getCorrectAnswer = async (questionId)=>{\n    const { data: data, error: error } = await (0, $7ZMNl.supabase).from('answers').select('question_id, answer, is_right').eq('question_id', questionId);\n    if (error) throw new Error(error.message);\n    return data.filter((item)=>item.is_right === 'true' || item.is_right === item.answer).map((item)=>item.answer.trim().toLowerCase());\n};\nconst $a86d009ba1f03684$export$f6da46caeb6c9e95 = async (test)=>{\n    const { data: data, error: error } = await (0, $7ZMNl.supabase).from('tests').update({\n        completed: test[0].completed + 1\n    }).eq('id', test[0].id);\n    if (error) console.error('Error updating completions:', error);\n    return;\n};\nconst $a86d009ba1f03684$export$cae4508e5bd16cd1 = async (answers)=>{\n    let correctAnswersCount = 0;\n    let totalCorrectAnswers = 0;\n    for (let a of answers){\n        const correctAnswers = await $a86d009ba1f03684$var$getCorrectAnswer(a.questionId);\n        if (correctAnswers.length > 0) {\n            const userAnswers = a.answers ? a.answers.map((ans)=>ans.trim().toLowerCase()) : [\n                a.answer.trim().toLowerCase()\n            ];\n            totalCorrectAnswers += correctAnswers.length;\n            const selectedCorrectAnswers = userAnswers.filter((answer)=>correctAnswers.includes(answer));\n            if (selectedCorrectAnswers.length === correctAnswers.length && selectedCorrectAnswers.length === userAnswers.length) correctAnswersCount += correctAnswers.length;\n        }\n    }\n    const grade = correctAnswersCount / totalCorrectAnswers * 100;\n    return {\n        grade: grade,\n        correctAnswersCount: correctAnswersCount,\n        totalCorrectAnswers: totalCorrectAnswers\n    };\n};\n\n\n\nvar $7ZMNl = parcelRequire(\"7ZMNl\");\nconst $6c96a239ec547905$export$6d2c7d77f685b87f = async (testId)=>{\n    const { data: data, error: error } = await (0, $7ZMNl.supabase).from('test_attempts').insert([\n        {\n            test_id: testId,\n            created_at: new Date()\n        }\n    ]).select();\n    if (error) {\n        console.error('Error starting test attempt:', error);\n        return null;\n    }\n    return data[0];\n};\nconst $6c96a239ec547905$export$c0d609e4eef5749 = async (attemptId, startTime)=>{\n    const duration = Math.round((Date.now() - startTime) / 1000);\n    const { error: error } = await (0, $7ZMNl.supabase).from('test_attempts').update({\n        completed_at: new Date(),\n        duration: duration\n    }).eq('id', attemptId);\n    if (error) console.error('Error completing test attempt:', error);\n};\nconst $6c96a239ec547905$export$1f102756df52af8d = async (attemptId, questionId, answerId = null)=>{\n    const { error: error } = await (0, $7ZMNl.supabase).from('question_answers').insert([\n        {\n            attempt_id: attemptId,\n            question_id: questionId,\n            answer_id: answerId\n        }\n    ]);\n    if (error) console.error(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u0441\\u043E\\u0445\\u0440\\u0430\\u043D\\u0435\\u043D\\u0438\\u044F \\u043E\\u0442\\u0432\\u0435\\u0442\\u0430:\", error);\n};\n\n\n\nvar $7ZMNl = parcelRequire(\"7ZMNl\");\n\nvar $14lqv = parcelRequire(\"14lqv\");\nasync function $83cebf677010e7da$export$5715097fc5bdbeeb(testId) {\n    if (!testId) {\n        console.error(\"\\u041F\\u043E\\u043C\\u0438\\u043B\\u043A\\u0430: testId \\u043E\\u0431\\u043E\\u0432'\\u044F\\u0437\\u043A\\u043E\\u0432\\u0438\\u0439!\");\n        return null;\n    }\n    const { data: data, error: error } = await (0, $7ZMNl.supabase).from('question_answers').select('question_id, answer_id, questions!inner(test_id)').eq('questions.test_id', testId);\n    if (error) {\n        console.error(\"\\u041F\\u043E\\u043C\\u0438\\u043B\\u043A\\u0430 \\u043E\\u0442\\u0440\\u0438\\u043C\\u0430\\u043D\\u043D\\u044F \\u0434\\u0430\\u043D\\u043D\\u0438\\u0445:\", error);\n        return null;\n    }\n    const counts = {};\n    data.forEach(({ question_id: question_id, answer_id: answer_id })=>{\n        const key = `${question_id}-${answer_id}`;\n        counts[key] = (counts[key] || 0) + 1;\n    });\n    return Object.entries(counts).map(([key, count])=>{\n        const [questionId, answerId] = key.split('-');\n        return {\n            testId: testId,\n            questionId: questionId,\n            answerId: answerId,\n            count: count\n        };\n    });\n}\nasync function $83cebf677010e7da$export$6fc211db480ac8cc(testId) {\n    if (!testId) {\n        console.error(\"\\u041F\\u043E\\u043C\\u0438\\u043B\\u043A\\u0430: testId \\u043E\\u0431\\u043E\\u0432'\\u044F\\u0437\\u043A\\u043E\\u0432\\u0438\\u0439!\");\n        return null;\n    }\n    const { data: data, error: error } = await (0, $7ZMNl.supabase).from('test_attempts').select('started_at, completed_at').eq('test_id', testId).not('completed_at', 'is', null);\n    if (error) {\n        console.error(\"\\u041F\\u043E\\u043C\\u0438\\u043B\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u043E\\u0442\\u0440\\u0438\\u043C\\u0430\\u043D\\u043D\\u0456 \\u0434\\u0430\\u043D\\u043D\\u0438\\u0445:\", error);\n        return null;\n    }\n    const times = data.map((attempt)=>(new Date(attempt.completed_at) - new Date(attempt.started_at)) / 1000);\n    const avgTime = times.reduce((sum, t)=>sum + t, 0) / times.length;\n    return (0, $14lqv.default)(avgTime.toFixed(1));\n}\nconst $83cebf677010e7da$export$24b27f4c2f9f2d90 = async (id)=>{\n    const { data: data, error: error } = await (0, $7ZMNl.supabase).from('answers').select('answer').eq('id', id);\n    if (error) throw new Error(error.message);\n    return data[0].answer;\n};\n\n\nlet $9a1d58ede759ba9f$var$attemptId = null;\nlet $9a1d58ede759ba9f$var$startTime = null;\nasync function $9a1d58ede759ba9f$var$initTest() {\n    let ques = 0;\n    const params = new URLSearchParams(document.location.search);\n    const id = params.get('test_id');\n    if (!id) return window.location.replace('/');\n    const test = await (0, $hk4dl.loadTest)(id);\n    $9a1d58ede759ba9f$var$startTime = Date.now();\n    const attempt = await (0, $6c96a239ec547905$export$6d2c7d77f685b87f)(test[0].id);\n    if (attempt) $9a1d58ede759ba9f$var$attemptId = attempt.id;\n    if (test.length === 0) {\n        document.title = \"\\u041D\\u0456\\u0447\\u043E\\u0433\\u043E \\u043D\\u0435 \\u0437\\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E\";\n        document.querySelector('.container').innerHTML = `\n      <div>\n        <a class=\"rollback\" href=\"/\">\\u{41F}\\u{43E}\\u{432}\\u{435}\\u{440}\\u{43D}\\u{443}\\u{442}\\u{438}\\u{441}\\u{44F} \\u{43D}\\u{430}\\u{437}\\u{430}\\u{434}</a>\n        <h1>\\u{41D}\\u{430} \\u{436}\\u{430}\\u{43B}\\u{44C} \\u{442}\\u{430}\\u{43A}\\u{43E}\\u{433}\\u{43E} \\u{442}\\u{435}\\u{441}\\u{442}\\u{443} \\u{449}\\u{435} \\u{43D}\\u{435} \\u{456}\\u{441}\\u{43D}\\u{443}\\u{454} \\u{1F437}</h1>\n      </div>\n    `;\n        return;\n    }\n    document.title = test[0].title;\n    const questions = await (0, $6d7041d98d88f3fe$export$de5889d48e25167b)(id);\n    const answers = await Promise.all(questions.map(async (question)=>await (0, $c51ab5d54aaa30b2$export$7a30e8c3b909984b)(question.id)));\n    const answersState = {};\n    const checkIfAllAnswered = ()=>{\n        const allAnswered = questions.every((q)=>{\n            const answerElement = document.querySelector(`[name=\"answer-${q.id}\"]`);\n            if (q.type === 'text') return answerElement && answerElement.value.trim() !== '';\n            if (q.type === 'single') return document.querySelector(`[name=\"answer-${q.id}\"]:checked`);\n            if (q.type === 'multiple') return document.querySelectorAll(`[name=\"answer-${q.id}[]\"]:checked`).length > 0;\n            return false;\n        });\n        finish.disabled = !allAnswered;\n    };\n    if (test && questions && answers) {\n        document.querySelector('.container').innerHTML = `\n      <a class=\"rollback\" href=\"/\">\\u{41D}\\u{430} \\u{433}\\u{43E}\\u{43B}\\u{43E}\\u{432}\\u{43D}\\u{443}</a>\n      <h1>${test[0].title}</h1>\n      <p class=\"test-description\">${test[0].description}</p>\n      <div id=\"wrapper\">\n        <button id=\"prev\" disabled><</button>\n        <button id=\"next\">></button>\n      </div>\n      <button id=\"finish\" disabled>\\u{417}\\u{430}\\u{432}\\u{435}\\u{440}\\u{448}\\u{438}\\u{442}\\u{438} \\u{442}\\u{435}\\u{441}\\u{442}</button>\n    `;\n        const wrapper = document.getElementById('wrapper');\n        const questionsToInsert = await Promise.all(questions.map(async (q)=>{\n            return `<div class=\"question-card\">\n          <h3>${q.question}</h3>\n          ${q.image_url ? `\n              <a data-fslightbox href=\"${q.image_url}\">\n                <img draggable=\"false\" data-lightbox=\"image-1\" class=\"q-image\" src=\"${q.image_url}\" alt=\"${q.question}\">\n              </a>\n              ` : ''}\n        </div>`;\n        }));\n        wrapper.insertAdjacentHTML('beforeend', questionsToInsert.join(''));\n        refreshFsLightbox();\n        const cards = document.querySelectorAll('.question-card');\n        const answersToInsert = questions.map((q)=>{\n            const questionAnswers = answers.flat().filter((answer)=>answer.question_id === q.id);\n            let answersHTML = '';\n            switch(q.type){\n                case 'text':\n                    answersHTML = `<input type=\"text\" name=\"answer-${q.id}\" class=\"text-answer\" placeholder=\"\\u{412}\\u{430}\\u{448}\\u{430} \\u{432}\\u{456}\\u{434}\\u{43F}\\u{43E}\\u{432}\\u{456}\\u{434}\\u{44C}:\">`;\n                    break;\n                case 'single':\n                    answersHTML = questionAnswers.map((answer)=>`\n            <label>\n              <input type=\"radio\" name=\"answer-${q.id}\" value=\"${answer.id}\">\n              ${answer.answer}\n            </label>\n          `).join('');\n                    break;\n                case 'multiple':\n                    answersHTML = questionAnswers.map((answer)=>`\n            <label>\n              <input type=\"checkbox\" name=\"answer-${q.id}[]\" value=\"${answer.id}\">\n              ${answer.answer}\n            </label>\n          `).join('');\n                    break;\n                default:\n                    answersHTML = \"<p>\\u041D\\u0435\\u0432\\u0456\\u0434\\u043E\\u043C\\u0438\\u0439 \\u0442\\u0438\\u043F</p>\";\n                    break;\n            }\n            return `<div class=\"answers\">${answersHTML}</div>`;\n        });\n        answersToInsert.forEach((html, index)=>{\n            cards[index].insertAdjacentHTML('beforeend', html);\n        });\n        const next = document.getElementById('next');\n        const prev = document.getElementById('prev');\n        const finish1 = document.getElementById('finish');\n        const updateButtons = ()=>{\n            if (ques + 1 >= questions.length) next.setAttribute('disabled', true);\n            else next.removeAttribute('disabled');\n            if (ques - 1 < 0) prev.setAttribute('disabled', true);\n            else prev.removeAttribute('disabled');\n        };\n        updateButtons();\n        const gatherAnswers = ()=>{\n            return questions.map((q)=>{\n                if (q.type === 'text') {\n                    const answerElement = document.querySelector(`[name=\"answer-${q.id}\"]`);\n                    const possibleAnswers = answers.find((group)=>group[0]?.question_id === q.id) || [];\n                    return {\n                        questionId: q.id,\n                        answer: answerElement ? answerElement.value.trim() : null,\n                        answerId: possibleAnswers.length > 0 ? possibleAnswers[0]?.id : null\n                    };\n                }\n                if (q.type === 'single') {\n                    const inputs = Array.from(document.querySelectorAll(`[name=\"answer-${q.id}\"]`));\n                    const selectedAnswer = inputs.find((a)=>a.checked);\n                    const answerIndex = selectedAnswer ? inputs.indexOf(selectedAnswer) : null;\n                    const possibleAnswers = answers.find((group)=>group[0]?.question_id === q.id) || [];\n                    return {\n                        questionId: q.id,\n                        answer: selectedAnswer ? selectedAnswer.parentElement.textContent.trim() : null,\n                        answerId: answerIndex !== null ? possibleAnswers[answerIndex]?.id : null\n                    };\n                }\n                if (q.type === 'multiple') {\n                    const inputs = Array.from(document.querySelectorAll(`[name=\"answer-${q.id}[]\"]`));\n                    const selectedAnswers = inputs.filter((input)=>input.checked);\n                    const possibleAnswers = answers.find((group)=>group[0]?.question_id === q.id) || [];\n                    return {\n                        questionId: q.id,\n                        answers: selectedAnswers.map((input)=>input.parentElement.textContent.trim()),\n                        answerIds: selectedAnswers.map((input)=>{\n                            const index = inputs.indexOf(input);\n                            return possibleAnswers[index]?.id || null;\n                        }).filter((id)=>id !== null)\n                    };\n                }\n                return {\n                    questionId: q.id,\n                    answer: null,\n                    answerId: null\n                };\n            });\n        };\n        next.addEventListener('click', ()=>{\n            if (ques + 1 >= questions.length) return;\n            ques++;\n            cards.forEach((c)=>{\n                c.style.transform = `translateX(${-ques * 100}%)`;\n            });\n            updateButtons();\n        });\n        prev.addEventListener('click', ()=>{\n            if (ques - 1 < 0) return;\n            ques--;\n            cards.forEach((c)=>{\n                c.style.transform = `translateX(${-ques * 100}%)`;\n            });\n            updateButtons();\n        });\n        document.addEventListener('input', (event)=>{\n            if (event.target.matches('[name^=\"answer-\"]')) {\n                const questionId = event.target.name.split('-')[1];\n                if (event.target.type === 'checkbox' || event.target.type === 'radio') answersState[questionId] = event.target.checked ? event.target.value : null;\n                else answersState[questionId] = event.target.value.trim();\n                checkIfAllAnswered();\n            }\n        });\n        setTimeout(()=>{\n            checkIfAllAnswered();\n        }, 1000);\n        function generateRandomColor() {\n            const r = Math.floor(Math.random() * 256);\n            const g = Math.floor(Math.random() * 256);\n            const b = Math.floor(Math.random() * 256);\n            return `rgb(${r}, ${g}, ${b})`;\n        }\n        finish1.addEventListener('click', async ()=>{\n            if (!$9a1d58ede759ba9f$var$attemptId) {\n                console.error(\"\\u0426\\u0456\\u0454\\u0457 \\u0441\\u043F\\u0440\\u043E\\u0431\\u0438 \\u043D\\u0435 \\u0437\\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E...\");\n                return;\n            }\n            localStorage.removeItem(`quizAnswers_${test[0].id}`);\n            const answers = gatherAnswers();\n            const { grade: grade, correctAnswersCount: correctAnswersCount, totalCorrectAnswers: totalCorrectAnswers } = await (0, $a86d009ba1f03684$export$cae4508e5bd16cd1)(answers);\n            if ($9a1d58ede759ba9f$var$attemptId) for (const answer of answers){\n                if (Array.isArray(answer.answers) && Array.isArray(answer.answerIds)) for(let i = 0; i < answer.answers.length; i++){\n                    const ans = answer.answers[i];\n                    const ansId = answer.answerIds[i];\n                    await (0, $6c96a239ec547905$export$1f102756df52af8d)(Number($9a1d58ede759ba9f$var$attemptId), Number(answer.questionId), ansId ? Number(ansId) : null, ansId ? null : ans);\n                }\n                else if (answer.answer) await (0, $6c96a239ec547905$export$1f102756df52af8d)(Number($9a1d58ede759ba9f$var$attemptId), Number(answer.questionId), answer.answerId ? Number(answer.answerId) : null, answer.answerId ? null : answer.answer);\n            }\n            await (0, $6c96a239ec547905$export$c0d609e4eef5749)($9a1d58ede759ba9f$var$attemptId, $9a1d58ede759ba9f$var$startTime);\n            await (0, $a86d009ba1f03684$export$f6da46caeb6c9e95)(test);\n            const answerDistribution = await (0, $83cebf677010e7da$export$5715097fc5bdbeeb)(test[0].id);\n            const avgTime = await (0, $83cebf677010e7da$export$6fc211db480ac8cc)(test[0].id);\n            wrapper.innerHTML = `<div id=\"dashboard\">\n        <div>\n          <h2>\\u{412}\\u{430}\\u{448} \\u{440}\\u{435}\\u{437}\\u{443}\\u{43B}\\u{44C}\\u{442}\\u{430}\\u{442}: ${Math.round(grade)}%</h2>\n          <p>\\u{412}\\u{438} \\u{432}\\u{456}\\u{434}\\u{43F}\\u{43E}\\u{432}\\u{456}\\u{43B}\\u{438} \\u{43F}\\u{440}\\u{430}\\u{432}\\u{438}\\u{43B}\\u{44C}\\u{43D}\\u{43E} \\u{43D}\\u{430} ${correctAnswersCount}/${totalCorrectAnswers} \\u{43F}\\u{440}\\u{430}\\u{432}\\u{438}\\u{43B}\\u{44C}\\u{43D}\\u{438}\\u{445} \\u{432}\\u{456}\\u{434}\\u{43F}\\u{43E}\\u{432}\\u{456}\\u{434}\\u{435}\\u{439}</p>\n          <p>\\u{421}\\u{435}\\u{440}\\u{435}\\u{434}\\u{43D}\\u{456}\\u{439} \\u{447}\\u{430}\\u{441} \\u{43F}\\u{440}\\u{43E}\\u{445}\\u{43E}\\u{434}\\u{436}\\u{435}\\u{43D}\\u{43D}\\u{44F} \\u{446}\\u{44C}\\u{43E}\\u{433}\\u{43E} \\u{442}\\u{435}\\u{441}\\u{442}\\u{443} \\u{441}\\u{435}\\u{440}\\u{435}\\u{434} \\u{456}\\u{43D}\\u{448}\\u{438}\\u{445}: ${avgTime}</p>\n        </div>\n        <div id=\"questions-list\">\n          <h3>\\u{412}\\u{430}\\u{448}\\u{456} \\u{432}\\u{456}\\u{434}\\u{43F}\\u{43E}\\u{432}\\u{456}\\u{434}\\u{456}:</h3>\n          <ul>\n            ${answers.map((answer)=>{\n                const questionObj = questions.find((q)=>q.id === answer.questionId);\n                const questionText = questionObj ? questionObj.question : \"\\u041F\\u0438\\u0442\\u0430\\u043D\\u043D\\u044F \\u043D\\u0435 \\u0437\\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E\";\n                let answerText = Array.isArray(answer.answers) && answer.answers.length > 0 ? answer.answers.join(', ') : answer.answer || \"\\u0411\\u0435\\u0437 \\u0432\\u0456\\u0434\\u043F\\u043E\\u0432\\u0456\\u0434\\u0456\";\n                if (questionObj.type == 'text') return `<li>\n                          <strong>\\u{41F}\\u{438}\\u{442}\\u{430}\\u{43D}\\u{43D}\\u{44F}:</strong> ${questionText}<br>\n                          <strong>\\u{412}\\u{430}\\u{448} \\u{432}\\u{456}\\u{434}\\u{43F}\\u{43E}\\u{432}\\u{456}\\u{434}\\u{44C}:</strong> ${answerText}<br>\n                        </li>`;\n                return `<li>\n                          <strong>\\u{41F}\\u{438}\\u{442}\\u{430}\\u{43D}\\u{43D}\\u{44F}:</strong> ${questionText}<br>\n                          <strong>\\u{412}\\u{430}\\u{448} \\u{432}\\u{456}\\u{434}\\u{43F}\\u{43E}\\u{432}\\u{456}\\u{434}\\u{44C}:</strong> ${answerText}<br>\n                          <canvas class=\"pieChart\" id=\"pie-${answer.questionId}\" width=\"200\" height=\"200\"></canvas>\n                        </li>`;\n            }).join('')}\n          </ul>\n        </div>\n      </div>`;\n            finish1.remove();\n            setTimeout(()=>{\n                answers.forEach(async (answer)=>{\n                    const questionId = String(answer.questionId);\n                    const questionDistribution = answerDistribution.filter((item)=>String(item.questionId) === questionId);\n                    if (questionDistribution.length === 0) return;\n                    const pieData = await Promise.all(questionDistribution.map(async (item)=>({\n                            label: await (0, $83cebf677010e7da$export$24b27f4c2f9f2d90)(item.answerId),\n                            value: item.count\n                        })));\n                    const pieLabels = pieData.map((item)=>`\\u{412}\\u{456}\\u{434}\\u{43F}\\u{43E}\\u{432}\\u{456}\\u{434}\\u{44C}: ${item.label}`);\n                    const pieValues = pieData.map((item)=>item.value);\n                    const pieColors = pieData.map(()=>generateRandomColor());\n                    const canvas = document.getElementById(`pie-${questionId}`);\n                    if (canvas) {\n                        const ctx = canvas.getContext('2d');\n                        if (ctx) new Chart(ctx, {\n                            type: 'pie',\n                            data: {\n                                labels: pieLabels,\n                                datasets: [\n                                    {\n                                        label: \"\\u041A\\u0456\\u043B\\u044C\\u043A\\u0456\\u0441\\u0442\\u044C\",\n                                        data: pieValues,\n                                        backgroundColor: pieColors,\n                                        hoverOffset: 4\n                                    }\n                                ]\n                            }\n                        });\n                        else console.error(\"\\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u043F\\u043E\\u043B\\u0443\\u0447\\u0438\\u0442\\u044C \\u043A\\u043E\\u043D\\u0442\\u0435\\u043A\\u0441\\u0442 \\u0434\\u043B\\u044F \\u043A\\u0430\\u043D\\u0432\\u0430\\u0441\\u0430\");\n                    } else console.error(\"\\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u043D\\u0430\\u0439\\u0442\\u0438 \\u043A\\u0430\\u043D\\u0432\\u0430\\u0441 \\u0434\\u043B\\u044F questionId:\", questionId);\n                });\n            }, 100);\n        });\n    }\n}\n$9a1d58ede759ba9f$var$initTest();\n\n})();\n//# sourceMappingURL=walkthrough.b0c0794d.js.map\n","import { loadAnswersToQuestions } from '../funcs/loadAnswersToQuestions';\nimport { loadQuestionsToTest } from '../funcs/loadQuestionsToTest';\nimport { loadTest } from '../funcs/loadTests';\nimport { checkAnswers, updateCompletions } from './server/completed';\nimport { saveUserAnswer } from './server/stat';\nimport { startTestAttempt, completeTestAttempt } from './server/stat';\nimport { getAnswerById, getAnswerDistribution } from '../funcs/getStats';\nimport { getAverageCompletionTime } from '../funcs/getStats';\n\nlet attemptId = null;\nlet startTime = null;\n\nasync function initTest() {\n  let ques = 0;\n  const params = new URLSearchParams(document.location.search);\n  const id = params.get('test_id');\n\n  if (!id) return window.location.replace('/');\n\n  const test = await loadTest(id);\n\n  startTime = Date.now();\n  const attempt = await startTestAttempt(test[0].id);\n  if (attempt) {\n    attemptId = attempt.id;\n  }\n\n  if (test.length === 0) {\n    document.title = 'Нічого не знайдено';\n    document.querySelector('.container').innerHTML = `\n      <div>\n        <a class=\"rollback\" href=\"/\">Повернутися назад</a>\n        <h1>На жаль такого тесту ще не існує 🐷</h1>\n      </div>\n    `;\n    return;\n  }\n\n  document.title = test[0].title;\n\n  const questions = await loadQuestionsToTest(id);\n\n  const answers = await Promise.all(\n    questions.map(async question => await loadAnswersToQuestions(question.id))\n  );\n\n  const answersState = {};\n  const checkIfAllAnswered = () => {\n    const allAnswered = questions.every(q => {\n      const answerElement = document.querySelector(`[name=\"answer-${q.id}\"]`);\n      if (q.type === 'text') {\n        return answerElement && answerElement.value.trim() !== '';\n      }\n      if (q.type === 'single') {\n        return document.querySelector(`[name=\"answer-${q.id}\"]:checked`);\n      }\n      if (q.type === 'multiple') {\n        return (\n          document.querySelectorAll(`[name=\"answer-${q.id}[]\"]:checked`)\n            .length > 0\n        );\n      }\n      return false;\n    });\n    finish.disabled = !allAnswered;\n  };\n  if (test && questions && answers) {\n    document.querySelector('.container').innerHTML = `\n      <a class=\"rollback\" href=\"/\">На головну</a>\n      <h1>${test[0].title}</h1>\n      <p class=\"test-description\">${test[0].description}</p>\n      <div id=\"wrapper\">\n        <button id=\"prev\" disabled><</button>\n        <button id=\"next\">></button>\n      </div>\n      <button id=\"finish\" disabled>Завершити тест</button>\n    `;\n\n    const wrapper = document.getElementById('wrapper');\n\n    const questionsToInsert = await Promise.all(\n      questions.map(async q => {\n        return `<div class=\"question-card\">\n          <h3>${q.question}</h3>\n          ${\n            q.image_url\n              ? `\n              <a data-fslightbox href=\"${q.image_url}\">\n                <img draggable=\"false\" data-lightbox=\"image-1\" class=\"q-image\" src=\"${q.image_url}\" alt=\"${q.question}\">\n              </a>\n              `\n              : ''\n          }\n        </div>`;\n      })\n    );\n\n    wrapper.insertAdjacentHTML('beforeend', questionsToInsert.join(''));\n    refreshFsLightbox();\n    const cards = document.querySelectorAll('.question-card');\n\n    const answersToInsert = questions.map(q => {\n      const questionAnswers = answers\n        .flat()\n        .filter(answer => answer.question_id === q.id);\n      let answersHTML = '';\n\n      switch (q.type) {\n        case 'text':\n          answersHTML = `<input type=\"text\" name=\"answer-${q.id}\" class=\"text-answer\" placeholder=\"Ваша відповідь:\">`;\n          break;\n\n        case 'single':\n          answersHTML = questionAnswers\n            .map(\n              answer => `\n            <label>\n              <input type=\"radio\" name=\"answer-${q.id}\" value=\"${answer.id}\">\n              ${answer.answer}\n            </label>\n          `\n            )\n            .join('');\n          break;\n\n        case 'multiple':\n          answersHTML = questionAnswers\n            .map(\n              answer => `\n            <label>\n              <input type=\"checkbox\" name=\"answer-${q.id}[]\" value=\"${answer.id}\">\n              ${answer.answer}\n            </label>\n          `\n            )\n            .join('');\n          break;\n\n        default:\n          answersHTML = '<p>Невідомий тип</p>';\n          break;\n      }\n\n      return `<div class=\"answers\">${answersHTML}</div>`;\n    });\n\n    answersToInsert.forEach((html, index) => {\n      cards[index].insertAdjacentHTML('beforeend', html);\n    });\n\n    const next = document.getElementById('next');\n    const prev = document.getElementById('prev');\n    const finish = document.getElementById('finish');\n\n    const updateButtons = () => {\n      if (ques + 1 >= questions.length) {\n        next.setAttribute('disabled', true);\n      } else {\n        next.removeAttribute('disabled');\n      }\n\n      if (ques - 1 < 0) {\n        prev.setAttribute('disabled', true);\n      } else {\n        prev.removeAttribute('disabled');\n      }\n    };\n\n    updateButtons();\n\n    const gatherAnswers = () => {\n      return questions.map(q => {\n        if (q.type === 'text') {\n          const answerElement = document.querySelector(\n            `[name=\"answer-${q.id}\"]`\n          );\n          const possibleAnswers =\n            answers.find(group => group[0]?.question_id === q.id) || [];\n\n          return {\n            questionId: q.id,\n            answer: answerElement ? answerElement.value.trim() : null,\n            answerId:\n              possibleAnswers.length > 0 ? possibleAnswers[0]?.id : null,\n          };\n        }\n\n        if (q.type === 'single') {\n          const inputs = Array.from(\n            document.querySelectorAll(`[name=\"answer-${q.id}\"]`)\n          );\n          const selectedAnswer = inputs.find(a => a.checked);\n          const answerIndex = selectedAnswer\n            ? inputs.indexOf(selectedAnswer)\n            : null;\n\n          const possibleAnswers =\n            answers.find(group => group[0]?.question_id === q.id) || [];\n\n          return {\n            questionId: q.id,\n            answer: selectedAnswer\n              ? selectedAnswer.parentElement.textContent.trim()\n              : null,\n            answerId:\n              answerIndex !== null ? possibleAnswers[answerIndex]?.id : null,\n          };\n        }\n\n        if (q.type === 'multiple') {\n          const inputs = Array.from(\n            document.querySelectorAll(`[name=\"answer-${q.id}[]\"]`)\n          );\n          const selectedAnswers = inputs.filter(input => input.checked);\n\n          const possibleAnswers =\n            answers.find(group => group[0]?.question_id === q.id) || [];\n\n          return {\n            questionId: q.id,\n            answers: selectedAnswers.map(input =>\n              input.parentElement.textContent.trim()\n            ),\n            answerIds: selectedAnswers\n              .map(input => {\n                const index = inputs.indexOf(input);\n                return possibleAnswers[index]?.id || null;\n              })\n              .filter(id => id !== null),\n          };\n        }\n\n        return { questionId: q.id, answer: null, answerId: null };\n      });\n    };\n\n    next.addEventListener('click', () => {\n      if (ques + 1 >= questions.length) {\n        return;\n      }\n      ques++;\n      cards.forEach(c => {\n        c.style.transform = `translateX(${-ques * 100}%)`;\n      });\n      updateButtons();\n    });\n\n    prev.addEventListener('click', () => {\n      if (ques - 1 < 0) {\n        return;\n      }\n      ques--;\n      cards.forEach(c => {\n        c.style.transform = `translateX(${-ques * 100}%)`;\n      });\n      updateButtons();\n    });\n\n    document.addEventListener('input', event => {\n      if (event.target.matches('[name^=\"answer-\"]')) {\n        const questionId = event.target.name.split('-')[1];\n        if (event.target.type === 'checkbox' || event.target.type === 'radio') {\n          answersState[questionId] = event.target.checked\n            ? event.target.value\n            : null;\n        } else {\n          answersState[questionId] = event.target.value.trim();\n        }\n        checkIfAllAnswered();\n      }\n    });\n    setTimeout(() => {\n      checkIfAllAnswered();\n    }, 1000);\n    function generateRandomColor() {\n      const r = Math.floor(Math.random() * 256);\n      const g = Math.floor(Math.random() * 256);\n      const b = Math.floor(Math.random() * 256);\n      return `rgb(${r}, ${g}, ${b})`;\n    }\n    finish.addEventListener('click', async () => {\n      if (!attemptId) {\n        console.error('Цієї спроби не знайдено...');\n        return;\n      }\n\n      localStorage.removeItem(`quizAnswers_${test[0].id}`);\n      const answers = gatherAnswers();\n\n      const { grade, correctAnswersCount, totalCorrectAnswers } =\n        await checkAnswers(answers);\n\n      if (attemptId) {\n        for (const answer of answers) {\n          if (\n            Array.isArray(answer.answers) &&\n            Array.isArray(answer.answerIds)\n          ) {\n            for (let i = 0; i < answer.answers.length; i++) {\n              const ans = answer.answers[i];\n              const ansId = answer.answerIds[i];\n\n              await saveUserAnswer(\n                Number(attemptId),\n                Number(answer.questionId),\n                ansId ? Number(ansId) : null,\n                ansId ? null : ans\n              );\n            }\n          } else if (answer.answer) {\n            await saveUserAnswer(\n              Number(attemptId),\n              Number(answer.questionId),\n              answer.answerId ? Number(answer.answerId) : null,\n              answer.answerId ? null : answer.answer\n            );\n          }\n        }\n      }\n\n      await completeTestAttempt(attemptId, startTime);\n      await updateCompletions(test);\n      const answerDistribution = await getAnswerDistribution(test[0].id);\n      const avgTime = await getAverageCompletionTime(test[0].id);\n      wrapper.innerHTML = `<div id=\"dashboard\">\n        <div>\n          <h2>Ваш результат: ${Math.round(grade)}%</h2>\n          <p>Ви відповіли правильно на ${correctAnswersCount}/${totalCorrectAnswers} правильних відповідей</p>\n          <p>Середній час проходження цього тесту серед інших: ${avgTime}</p>\n        </div>\n        <div id=\"questions-list\">\n          <h3>Ваші відповіді:</h3>\n          <ul>\n            ${answers\n              .map(answer => {\n                const questionObj = questions.find(\n                  q => q.id === answer.questionId\n                );\n\n                const questionText = questionObj\n                  ? questionObj.question\n                  : 'Питання не знайдено';\n                let answerText =\n                  Array.isArray(answer.answers) && answer.answers.length > 0\n                    ? answer.answers.join(', ')\n                    : answer.answer || 'Без відповіді';\n                if (questionObj.type == 'text') {\n                  return `<li>\n                          <strong>Питання:</strong> ${questionText}<br>\n                          <strong>Ваш відповідь:</strong> ${answerText}<br>\n                        </li>`;\n                }\n                return `<li>\n                          <strong>Питання:</strong> ${questionText}<br>\n                          <strong>Ваш відповідь:</strong> ${answerText}<br>\n                          <canvas class=\"pieChart\" id=\"pie-${answer.questionId}\" width=\"200\" height=\"200\"></canvas>\n                        </li>`;\n              })\n              .join('')}\n          </ul>\n        </div>\n      </div>`;\n\n      finish.remove();\n\n      setTimeout(() => {\n        answers.forEach(async answer => {\n          const questionId = String(answer.questionId);\n\n          const questionDistribution = answerDistribution.filter(\n            item => String(item.questionId) === questionId\n          );\n\n          if (questionDistribution.length === 0) {\n            return;\n          }\n\n          const pieData = await Promise.all(\n            questionDistribution.map(async item => ({\n              label: await getAnswerById(item.answerId),\n              value: item.count,\n            }))\n          );\n\n          const pieLabels = pieData.map(item => `Відповідь: ${item.label}`);\n          const pieValues = pieData.map(item => item.value);\n\n          const pieColors = pieData.map(() => generateRandomColor());\n\n          const canvas = document.getElementById(`pie-${questionId}`);\n          if (canvas) {\n            const ctx = canvas.getContext('2d');\n\n            if (ctx) {\n              new Chart(ctx, {\n                type: 'pie',\n                data: {\n                  labels: pieLabels,\n                  datasets: [\n                    {\n                      label: 'Кількість',\n                      data: pieValues,\n                      backgroundColor: pieColors,\n                      hoverOffset: 4,\n                    },\n                  ],\n                },\n              });\n            } else {\n              console.error('Не удалось получить контекст для канваса');\n            }\n          } else {\n            console.error(\n              'Не удалось найти канвас для questionId:',\n              questionId\n            );\n          }\n        });\n      }, 100);\n    });\n  }\n}\n\ninitTest();\n","import { supabase } from '../src/server/supabase';\n\nexport const loadAnswersToQuestions = async id => {\n  const { data, error } = await supabase\n    .from('answers')\n    .select('question_id,answer, id')\n    .eq('question_id', id);\n\n  if (error) {\n    throw new Error(error.message);\n  }\n\n  return data;\n};\n","import { supabase } from '../src/server/supabase';\n\nexport const loadQuestionsToTest = async id => {\n  const { data, error } = await supabase\n    .from('questions')\n    .select('*')\n    .eq('test_id', id);\n\n  if (error) {\n    throw new Error(error.message);\n  }\n\n  return data;\n};\n","import { supabase } from './supabase';\n\nconst getCorrectAnswer = async questionId => {\n  const { data, error } = await supabase\n    .from('answers')\n    .select('question_id, answer, is_right')\n    .eq('question_id', questionId);\n\n  if (error) {\n    throw new Error(error.message);\n  }\n\n  return data\n    .filter(item => item.is_right === 'true' || item.is_right === item.answer)\n    .map(item => item.answer.trim().toLowerCase());\n};\n\nexport const updateCompletions = async test => {\n  const { data, error } = await supabase\n    .from('tests')\n    .update({ completed: test[0].completed + 1 })\n    .eq('id', test[0].id);\n\n  if (error) {\n    console.error('Error updating completions:', error);\n  }\n\n  return;\n};\n\nexport const checkAnswers = async answers => {\n  let correctAnswersCount = 0;\n  let totalCorrectAnswers = 0;\n\n  for (let a of answers) {\n    const correctAnswers = await getCorrectAnswer(a.questionId);\n\n    if (correctAnswers.length > 0) {\n      const userAnswers = a.answers\n        ? a.answers.map(ans => ans.trim().toLowerCase())\n        : [a.answer.trim().toLowerCase()];\n\n      totalCorrectAnswers += correctAnswers.length;\n\n      const selectedCorrectAnswers = userAnswers.filter(answer =>\n        correctAnswers.includes(answer)\n      );\n\n      if (\n        selectedCorrectAnswers.length === correctAnswers.length &&\n        selectedCorrectAnswers.length === userAnswers.length\n      ) {\n        correctAnswersCount += correctAnswers.length;\n      }\n    }\n  }\n  const grade = (correctAnswersCount / totalCorrectAnswers) * 100;\n\n  return { grade, correctAnswersCount, totalCorrectAnswers };\n};\n","import { supabase } from './supabase';\n\nexport const startTestAttempt = async testId => {\n  const { data, error } = await supabase\n    .from('test_attempts')\n    .insert([{ test_id: testId, created_at: new Date() }])\n    .select();\n\n  if (error) {\n    console.error('Error starting test attempt:', error);\n    return null;\n  }\n\n  return data[0];\n};\n\nexport const completeTestAttempt = async (attemptId, startTime) => {\n  const duration = Math.round((Date.now() - startTime) / 1000);\n\n  const { error } = await supabase\n    .from('test_attempts')\n    .update({ completed_at: new Date(), duration })\n    .eq('id', attemptId);\n\n  if (error) {\n    console.error('Error completing test attempt:', error);\n  }\n};\n\nexport const saveUserAnswer = async (\n  attemptId,\n  questionId,\n  answerId = null\n) => {\n  const { error } = await supabase.from('question_answers').insert([\n    {\n      attempt_id: attemptId,\n      question_id: questionId,\n      answer_id: answerId,\n    },\n  ]);\n\n  if (error) {\n    console.error('Ошибка сохранения ответа:', error);\n  }\n};\n","import { supabase } from '../src/server/supabase';\nimport formatTime from './timeSpend';\n\nexport async function getAnswerDistribution(testId) {\n  if (!testId) {\n    console.error(\"Помилка: testId обов'язковий!\");\n    return null;\n  }\n\n  const { data, error } = await supabase\n    .from('question_answers')\n    .select('question_id, answer_id, questions!inner(test_id)')\n    .eq('questions.test_id', testId);\n\n  if (error) {\n    console.error('Помилка отримання данних:', error);\n    return null;\n  }\n\n  const counts = {};\n  data.forEach(({ question_id, answer_id }) => {\n    const key = `${question_id}-${answer_id}`;\n    counts[key] = (counts[key] || 0) + 1;\n  });\n\n  return Object.entries(counts).map(([key, count]) => {\n    const [questionId, answerId] = key.split('-');\n    return { testId, questionId, answerId, count };\n  });\n}\n\nexport async function getAverageCompletionTime(testId) {\n  if (!testId) {\n    console.error(\"Помилка: testId обов'язковий!\");\n    return null;\n  }\n\n  const { data, error } = await supabase\n    .from('test_attempts')\n    .select('started_at, completed_at')\n    .eq('test_id', testId)\n    .not('completed_at', 'is', null);\n\n  if (error) {\n    console.error('Помилка при отриманні данних:', error);\n    return null;\n  }\n\n  const times = data.map(\n    attempt =>\n      (new Date(attempt.completed_at) - new Date(attempt.started_at)) / 1000\n  );\n\n  const avgTime = times.reduce((sum, t) => sum + t, 0) / times.length;\n  return formatTime(avgTime.toFixed(1));\n}\n\nexport const getAnswerById = async id => {\n  const { data, error } = await supabase\n    .from('answers')\n    .select('answer')\n    .eq('id', id);\n\n  if (error) {\n    throw new Error(error.message);\n  }\n\n  return data[0].answer;\n};\n"],"names":["$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$7ZMNl","$c51ab5d54aaa30b2$export$7a30e8c3b909984b","data","error","supabase","from","select","eq","message","$6d7041d98d88f3fe$export$de5889d48e25167b","$hk4dl","$a86d009ba1f03684$var$getCorrectAnswer","questionId","filter","item","is_right","answer","map","trim","toLowerCase","$a86d009ba1f03684$export$f6da46caeb6c9e95","test","update","completed","console","$a86d009ba1f03684$export$cae4508e5bd16cd1","answers","correctAnswersCount","totalCorrectAnswers","a","correctAnswers","length","userAnswers","ans","selectedCorrectAnswers","includes","grade","$6c96a239ec547905$export$6d2c7d77f685b87f","testId","insert","test_id","created_at","Date","$6c96a239ec547905$export$c0d609e4eef5749","attemptId","startTime","duration","Math","round","now","completed_at","$6c96a239ec547905$export$1f102756df52af8d","answerId","attempt_id","question_id","answer_id","$14lqv","$83cebf677010e7da$export$5715097fc5bdbeeb","counts","forEach","key","Object","entries","count","split","$83cebf677010e7da$export$6fc211db480ac8cc","not","times","attempt","started_at","avgTime","reduce","sum","t","default","toFixed","$83cebf677010e7da$export$24b27f4c2f9f2d90","$9a1d58ede759ba9f$var$attemptId","$9a1d58ede759ba9f$var$startTime","$9a1d58ede759ba9f$var$initTest","ques","params","URLSearchParams","document","location","search","get","replace","loadTest","title","querySelector","innerHTML","questions","Promise","all","question","answersState","checkIfAllAnswered","allAnswered","every","q","answerElement","type","value","querySelectorAll","finish","disabled","description","wrapper","getElementById","questionsToInsert","image_url","insertAdjacentHTML","join","refreshFsLightbox","cards","answersToInsert","questionAnswers","flat","answersHTML","html","index","next","prev","finish1","updateButtons","setAttribute","removeAttribute","gatherAnswers","possibleAnswers","find","group","inputs","Array","selectedAnswer","checked","answerIndex","indexOf","parentElement","textContent","selectedAnswers","input","answerIds","addEventListener","c","style","transform","event","target","matches","name","setTimeout","localStorage","removeItem","isArray","i","ansId","Number","answerDistribution","questionObj","questionText","answerText","remove","String","questionDistribution","pieData","label","pieLabels","pieValues","pieColors","generateRandomColor","r","floor","random","g","b","canvas","ctx","getContext","Chart","labels","datasets","backgroundColor","hoverOffset"],"version":3,"file":"walkthrough.b0c0794d.js.map"}